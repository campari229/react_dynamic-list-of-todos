{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api.ts","components/Buttonns/Buttons.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","className","style","backgroundColor","completed","user","name","title","TodoList","todos","map","key","id","usersURL","todosURL","getData","url","a","fetch","response","json","result","data","Buttons","props","type","onClick","titleSort","nameSort","showCompleted","App","state","isLoading","loadTodos","setState","users","preparedTodos","find","userId","sortByTitle","prevState","sort","b","localeCompare","sortByName","Number","this","length","disabled","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2WASaA,G,YAA4B,SAAC,GAAD,MAAGC,EAAH,EAAGA,KAAH,OACvC,yBAAKC,UAAU,qBAAqBC,MAAO,CAAEC,gBAAgB,GAAD,OAAKH,EAAKI,UAAY,QAAU,SAC1F,0BAAMH,UAAU,mBAAhB,UAAmCD,EAAKK,YAAxC,aAAmC,EAAWC,MAC9C,uBAAGL,UAAU,oBAAoBD,EAAKO,UCF7BC,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,wBAAIR,UAAU,mBACXQ,EAAMC,KAAI,SAAAV,GAAI,OACb,wBACEC,UAAU,aACVU,IAAKX,EAAKY,IAEV,kBAAC,EAAD,CAAUZ,KAAMA,WCjBXa,EAAW,0CACXC,EAAW,0CAEXC,EAAO,uCAAG,WAAUC,GAAV,iBAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,gBAEAA,EAASC,OAFT,cAEfC,EAFe,yBAIdA,EAAOC,MAJO,2CAAH,sDCOPC,G,MAA2B,SAACC,GAAD,OACtC,yBAAKvB,UAAU,iBACb,4BACEA,UAAU,MACVwB,KAAK,SACLC,QAASF,EAAMG,WAHjB,iBAOA,4BACE1B,UAAU,MACVwB,KAAK,SACLC,QAASF,EAAMI,UAHjB,gBAOA,4BACE3B,UAAU,MACVwB,KAAK,SACLC,QAASF,EAAMK,eAHjB,2BCuEWC,E,4MAnFbC,MAAQ,CACNtB,MAAO,GACPuB,WAAW,G,EAGbC,U,sBAAY,gCAAAhB,EAAA,6DACV,EAAKiB,SAAS,CACZF,WAAW,IAFH,SAKUjB,EAAgBD,GAL1B,cAKJL,EALI,gBAMUM,EAAgBF,GAN1B,OAMJsB,EANI,OAOJC,EAAgB3B,EAAMC,KAAI,SAACV,GAAD,mBAAC,eAE1BA,GAFyB,IAG5BK,KAAM8B,EAAME,MAAK,SAAChC,GAAD,OAAUA,EAAKO,KAAOZ,EAAKsC,eAIhD,EAAKJ,SAAS,CACZzB,MAAO2B,EACPJ,WAAW,IAhBH,2C,EAoBZO,YAAc,WACZ,EAAKL,UAAS,SAAAM,GAAS,MAAK,CAC1B/B,MAAO+B,EAAU/B,MAAMgC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAEV,MAAMoC,cAAcD,EAAEnC,e,EAIlEqC,WAAa,WACX,EAAKV,UAAS,SAAAM,GAAS,MAAK,CAC1B/B,MAAO+B,EAAU/B,MAAMgC,MAAK,SAACxB,EAAGyB,GAC9B,OAAIzB,EAAEZ,MAAQqC,EAAErC,KACPY,EAAEZ,KAAKC,KAAKqC,cAAcD,EAAErC,KAAKC,MAGnC,U,EAKbuB,cAAgB,WACd,EAAKK,UAAS,SAAAM,GAAS,MAAK,CAC1B/B,MAAO+B,EAAU/B,MAAMgC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUG,OAAOH,EAAEtC,WAAayC,OAAO5B,EAAEb,mB,uDAI/D,IAAD,EACsB0C,KAAKf,MAA1BtB,EADD,EACCA,MAAOuB,EADR,EACQA,UAEf,OACE,yBAAK/B,UAAU,QACb,qDAEEQ,EAAMsC,OAEF,6BACE,kBAAC,EAAD,CACEpB,UAAWmB,KAAKP,YAChBX,SAAUkB,KAAKF,WACff,cAAeiB,KAAKjB,gBAEtB,kBAAC,EAAD,CAAUpB,MAAOA,KAInB,4BACER,UAAU,MACVwB,KAAK,SACLC,QAASoB,KAAKb,UACde,SAAUhB,GAJZ,UAMMA,EAAY,aAAe,c,GA3E7BiB,IAAMC,WCTxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.12f1b364.chunk.js","sourcesContent":["import React from 'react';\nimport { PreparedTodo } from '../Interfaces/Interfaces';\n\nimport './TodoItem.css';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => (\n  <div className=\"todo__item-wrapper\" style={{ backgroundColor: `${todo.completed ? 'green' : 'red'}` }}>\n    <span className=\"todo__item-name\">{todo.user?.name}</span>\n    <p className=\"todo__item-title\">{todo.title}</p>\n  </div>\n);\n","import React from 'react';\nimport { PreparedTodo } from '../Interfaces/Interfaces';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport './TodoList.css';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"todo__list list\">\n    {todos.map(todo => (\n      <li\n        className=\"list__item\"\n        key={todo.id}\n      >\n        <TodoItem todo={todo} />\n      </li>\n    ))}\n  </ul>\n);\n","export const usersURL = 'https://mate.academy/students-api/users';\nexport const todosURL = 'https://mate.academy/students-api/todos';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const result = await response.json();\n\n  return result.data;\n};\n","import React, { MouseEvent } from 'react';\n\nimport './Buttons.css';\n\ninterface Props {\n  titleSort: (event: MouseEvent) => void;\n  nameSort: (event: MouseEvent) => void;\n  showCompleted: (event: MouseEvent) => void;\n}\n\nexport const Buttons: React.FC<Props> = (props) => (\n  <div className=\"todo__buttons\">\n    <button\n      className=\"btn\"\n      type=\"button\"\n      onClick={props.titleSort}\n    >\n      Sort by title\n    </button>\n    <button\n      className=\"btn\"\n      type=\"button\"\n      onClick={props.nameSort}\n    >\n      Sort by name\n    </button>\n    <button\n      className=\"btn\"\n      type=\"button\"\n      onClick={props.showCompleted}\n    >\n      Show completed first\n    </button>\n  </div>\n);\n","import React from 'react';\nimport './App.css';\n\nimport { Todo, User, PreparedTodo } from './components/Interfaces/Interfaces';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getData, usersURL, todosURL } from './api';\nimport { Buttons } from './components/Buttonns/Buttons';\n\ninterface State {\n  todos: PreparedTodo[];\n  isLoading: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    todos: [],\n    isLoading: false,\n  };\n\n  loadTodos = async () => {\n    this.setState({\n      isLoading: true,\n    });\n\n    const todos = await getData<Todo[]>(todosURL);\n    const users = await getData<User[]>(usersURL);\n    const preparedTodos = todos.map((todo) => (\n      {\n        ...todo,\n        user: users.find((user) => user.id === todo.userId),\n      }\n    ));\n\n    this.setState({\n      todos: preparedTodos,\n      isLoading: false,\n    });\n  };\n\n  sortByTitle = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort((a, b) => a.title.localeCompare(b.title)),\n    }));\n  };\n\n  sortByName = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort((a, b) => {\n        if (a.user && b.user) {\n          return a.user.name.localeCompare(b.user.name);\n        }\n\n        return 0;\n      }),\n    }));\n  };\n\n  showCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort((a, b) => Number(b.completed) - Number(a.completed)),\n    }));\n  };\n\n  render() {\n    const { todos, isLoading } = this.state;\n\n    return (\n      <div className=\"todo\">\n        <h1>Dynamic list of todos</h1>\n        {\n          todos.length\n            ? (\n              <div>\n                <Buttons\n                  titleSort={this.sortByTitle}\n                  nameSort={this.sortByName}\n                  showCompleted={this.showCompleted}\n                />\n                <TodoList todos={todos} />\n              </div>\n            )\n            : (\n              <button\n                className=\"btn\"\n                type=\"button\"\n                onClick={this.loadTodos}\n                disabled={isLoading}\n              >\n                {`${isLoading ? 'Loading...' : 'Load'}`}\n              </button>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}